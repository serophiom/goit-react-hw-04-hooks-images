{"version":3,"sources":["Components/Searchbar/Searchbar.js","FetchSearch.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/ImageGallery/ImageGallery.js","Components/Button/Button.js","Components/Loader/Loader.js","Components/Modal/Modal.js","Components/App/App.js","index.js"],"names":["Searchbar","onSubmit","useState","imageName","setImageName","className","event","preventDefault","trim","toast","error","type","autocomplete","autofocus","placeholder","value","onChange","currentTarget","toLowerCase","FetchSearch","query","pageNumber","fetch","then","response","json","propTypes","PropTypes","string","isRequired","number","ImageGalleryItem","id","url","name","openModal","src","alt","onClick","ImageGallery","images","clickOnImage","map","webformatURL","tags","Button","clickOnButton","LoaderOfImages","color","height","width","modalRoot","document","querySelector","Modal","closeModal","modalImage","useEffect","window","addEventListener","handleKeydown","removeEventListener","code","createPortal","target","App","setImages","setPageNumber","isLoad","setIsLoad","modalWindow","setModalWindow","setModalImage","setAlt","hits","scroll","scrollTo","top","documentElement","scrollHeight","behavior","idOfElement","Number","dataset","currentImage","filter","image","forEach","element","largeImageURL","length","nextPage","finally","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"oZAMe,SAASA,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACjC,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAkBA,OACI,wBAAQC,UAAU,YAAlB,SACA,uBAAMA,UAAU,aAAaJ,SAdZ,SAAAK,GACjBA,EAAMC,iBAEmB,KAArBJ,EAAUK,QAKdP,EAASE,GACTC,EAAa,KALTK,IAAMC,MAAM,yBAUhB,UACI,wBAAQC,KAAK,SAASN,UAAU,oBAAhC,SACA,sBAAMA,UAAU,0BAAhB,sBAGA,uBACAA,UAAU,mBACVM,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,MAAOZ,EACPa,SA9BiB,SAAAV,GACrBF,EAAaE,EAAMW,cAAcF,MAAMG,uB,oBCN/C,SAASC,EAAaC,EAAOC,GACrB,OAAOC,MAAM,8BAAD,OAA+BF,EAA/B,iBAA6CC,EAA7C,gBAHL,qCAGK,2DACjBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAG7BN,EAAYO,UAAY,CAChBN,MAAOO,IAAUC,OAAOC,WACxBR,WAAYM,IAAUG,OAAOD,YAGtBV,Q,MCVA,SAASY,EAAT,GAA0D,IAA7BC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UACvD,OACI,oBAAI9B,UAAU,mBAAd,SACI,qBAAK+B,IAAKH,EAAKI,IAAKH,EAAM,UAASF,EAAI3B,UAAU,yBAAyBiC,QAASH,KADjDH,G,MCD/B,SAASO,EAAT,GAAkD,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aAC5C,OACI,oBAAIpC,UAAU,eAAd,SACKmC,GAAUA,EAAOE,KAAI,gBAAGV,EAAH,EAAGA,GAAIW,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OAClB,cAAC,EAAD,CACAZ,GAAIA,EACJC,IAAKU,EACLT,KAAMU,EACNT,UAAWM,S,MCTZ,SAASI,EAAT,GAAqC,IAAlBC,EAAiB,EAAjBA,cAC9B,OACI,wBAAQzC,UAAU,SAASM,KAAK,SAAS2B,QAASQ,EAAlD,uB,2BCFO,SAASC,IACpB,OACG,cAAC,IAAD,CACApC,KAAK,QACLqC,MAAM,UACNC,OAAQ,GACRC,MAAO,K,UCLRC,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAT,GAAkD,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,WAAYnB,EAAO,EAAPA,IACrDoB,qBAAW,WAGP,OAFAC,OAAOC,iBAAiB,UAAWC,GAE5B,WACHF,OAAOG,oBAAoB,UAAWD,OAI9C,IAAMA,EAAgB,SAACtD,GACA,WAAfA,EAAMwD,MACNP,KAUR,OAAOQ,uBACH,qBAAK1D,UAAU,UAAUiC,QAPD,SAAChC,GACrBA,EAAM0D,SAAW1D,EAAMW,eACvBsC,KAKJ,SACI,qBAAKlD,UAAU,QAAf,SACA,qBAAK+B,IAAKoB,EAAYnB,IAAKA,QAGnCc,G,MCxBW,SAASc,IACtB,MAAkC/D,mBAAU,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAU,IAAtC,mBAAOsC,EAAP,KAAe0B,EAAf,KACA,EAAoChE,mBAAU,GAA9C,mBAAOmB,EAAP,KAAmB8C,EAAnB,KACA,EAA4BjE,oBAAU,GAAtC,mBAAOkE,EAAP,KAAeC,EAAf,KACA,EAAsCnE,oBAAU,GAAhD,mBAAOoE,EAAP,KAAoBC,EAApB,KACA,EAAoCrE,mBAAU,IAA9C,mBAAOsD,EAAP,KAAmBgB,EAAnB,KACA,EAAsBtE,mBAAU,IAAhC,mBAAOmC,EAAP,KAAYoC,EAAZ,KAEAhB,qBAAW,WACT,GAAkB,KAAdtD,EAAJ,CAMAkE,GAAU,GACVF,EAAc,GACdhD,EAAYhB,EAJM,GAIgBoB,MAAK,SAAAC,GACnC0C,EAAU1C,EAASkD,MACnBL,GAAU,SAEb,CAAClE,IAEJ,IAYMwE,EAAS,WACbjB,OAAOkB,SAAS,CACdC,IAAKzB,SAAS0B,gBAAgBC,aAC9BC,SAAU,YAwBZ,OACE,qCACA,cAAC,EAAD,CAAW/E,SAVY,SAAAc,GACzBX,EAAaW,MAUX,cAAC,EAAD,CAAcyB,OAAQA,EAAQC,aAvBhB,SAAAnC,GAChB,IAAM2E,EAAcC,OAAO5E,EAAM0D,OAAOmB,QAAQnD,IAC1CoD,EAAe5C,EAAO6C,QAAO,SAACC,GAClC,OAAOA,EAAMtD,KAAOiD,KAEV,OAAZG,QAAY,IAAZA,KAAcG,SAAQ,SAACC,GACrBhB,EAAcgB,EAAQC,eACtBhB,EAAOe,EAAQ5C,SAEjB2B,GAAe,MAeZ/B,EAAOkD,OAAS,GAAK,cAAC,EAAD,CAAQ5C,cA3CJ,WAC5B,IAAI6C,EAAWtE,EAAa,EAC5B8C,EAAcwB,GACdtB,GAAU,GACVlD,EAAYhB,EAAWwF,GAAUpE,MAAK,SAAAC,GACpC0C,EAAU,GAAD,mBAAK1B,GAAL,YAAgBhB,EAASkD,QAClCL,GAAU,MACTuB,SAAQ,WACTjB,UAoCCP,GAAU,cAACrB,EAAD,IACVuB,GACC,cAAC,EAAD,CAAOd,WAAYA,EAAYnB,IAAKA,EAAKkB,WAX5B,WACjBgB,GAAgBD,MAYd,cAAC,IAAD,CAAgBuB,UAAW,S,YC5EjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAAS6C,eAAe,W","file":"static/js/main.fec72980.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Searchbar.css';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Searchbar ({ onSubmit }) {\r\n    const [imageName, setImageName] = useState('');\r\n\r\n    const handleNameChange = event => {\r\n        setImageName(event.currentTarget.value.toLowerCase());\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (imageName.trim() === '') {\r\n            toast.error('Enter the image name');\r\n            return;\r\n        }\r\n        \r\n        onSubmit(imageName);\r\n        setImageName('');\r\n    };\r\n    \r\n    return (\r\n        <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n            <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n            </button>\r\n\r\n            <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autocomplete=\"off\"\r\n            autofocus\r\n            placeholder=\"Search images and photos\"\r\n            value={imageName}\r\n            onChange={handleNameChange}\r\n            />\r\n        </form>\r\n        </header>\r\n    );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n}","import PropTypes from 'prop-types';\r\n\r\nconst ApiKey = '21951044-669b58be8946ea9fe70fb579e';\r\n\r\nfunction FetchSearch (query, pageNumber) {\r\n        return fetch(`https://pixabay.com/api/?q=${query}&page=${pageNumber}&key=${ApiKey}&image_type=photo&orientation=horizontal&per_page=12\r\n`).then(response => response.json());\r\n}\r\n\r\nFetchSearch.propTypes = {\r\n        query: PropTypes.string.isRequired,\r\n        pageNumber: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default FetchSearch;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageGalleryItem.css';\r\n\r\nexport default function ImageGalleryItem ({ id, url, name, openModal }) {\r\n    return (\r\n        <li className=\"ImageGalleryItem\" key={id}>\r\n            <img src={url} alt={name} data-id={id} className=\"ImageGalleryItem-image\" onClick={openModal}/>\r\n        </li>\r\n    );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    openModal: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageGallery.css';\r\n\r\nexport default function ImageGallery ({ images, clickOnImage }) {\r\n    return (\r\n        <ul className=\"ImageGallery\">\r\n            {images && images.map(({ id, webformatURL, tags }) => (\r\n                <ImageGalleryItem \r\n                id={id}\r\n                url={webformatURL}\r\n                name={tags}\r\n                openModal={clickOnImage}\r\n                />   \r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n    images: PropTypes.array.isRequired,\r\n    clickOnImage: PropTypes.func.isRequired,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Button.css';\r\n\r\nexport default function Button ({ clickOnButton }) {\r\n    return (\r\n        <button className=\"Button\" type=\"button\" onClick={clickOnButton}>\r\n            Load more\r\n        </button>\r\n    );\r\n}\r\n\r\nButton.propTypes = {\r\n    clickOnButton: PropTypes.func.isRequired,\r\n}","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function LoaderOfImages () {\r\n    return (\r\n       <Loader\r\n       type=\"Rings\"\r\n       color=\"#00BFFF\"\r\n       height={80}\r\n       width={80}\r\n       /> \r\n    );\r\n}","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal ({ closeModal, modalImage, alt }) {\r\n    useEffect (() => {\r\n        window.addEventListener('keydown', handleKeydown);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeydown);\r\n        }\r\n    });\r\n\r\n    const handleKeydown = (event) => {\r\n        if (event.code === \"Escape\") {\r\n            closeModal();\r\n        }\r\n    };\r\n\r\n    const handleBackdropClick = (event) => {\r\n        if (event.target === event.currentTarget) {\r\n            closeModal();  \r\n        }\r\n    };\r\n\r\n    return createPortal(\r\n        <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n            <div className=\"Modal\">\r\n            <img src={modalImage} alt={alt} />\r\n        </div>\r\n        </div>,\r\n    modalRoot\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n    modalImage: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    closeModal: PropTypes.func.isRequired,\r\n};","import { useState, useEffect } from 'react';\nimport Searchbar from '../Searchbar/Searchbar';\nimport FetchSearch from '../../FetchSearch';\nimport ImageGallery from '../ImageGallery/ImageGallery';\nimport Button from '../Button/Button';\nimport LoaderOfImages from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\n\nexport default function App () {\n  const [imageName, setImageName] = useState ('');\n  const [images, setImages] = useState ([]);\n  const [pageNumber, setPageNumber] = useState (1);\n  const [isLoad, setIsLoad] = useState (false);\n  const [modalWindow, setModalWindow] = useState (false);\n  const [modalImage, setModalImage] = useState ('');\n  const [alt, setAlt] = useState ('');\n\n  useEffect (() => {\n    if (imageName === '') {\n      return;\n    }\n    \n    const startPage = 1;\n\n    setIsLoad(true);\n    setPageNumber(1);\n    FetchSearch(imageName, startPage).then(response => {\n        setImages(response.hits);\n        setIsLoad(false);\n      });\n  }, [imageName])\n\n  const handleAddImagesButton = () => {\n    let nextPage = pageNumber + 1;\n    setPageNumber(nextPage);\n    setIsLoad(true);\n    FetchSearch(imageName, nextPage).then(response => {\n      setImages([...images, ...response.hits]);\n      setIsLoad(false)\n    }).finally(() => {\n      scroll();\n    })\n  };\n\n  const scroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    })\n  }\n\n  const openModal = event => {\n    const idOfElement = Number(event.target.dataset.id);\n    const currentImage = images.filter((image) => {\n      return image.id === idOfElement;\n    });\n    currentImage?.forEach((element) => {\n      setModalImage(element.largeImageURL);\n      setAlt(element.tags)\n    });\n    setModalWindow(true);\n  };\n\n  const handleSearchSubmit = value => {\n    setImageName(value);\n  };\n\n  const modalSwith = () => {\n    setModalWindow(!modalWindow);\n  }\n\n    return (\n      <>\n      <Searchbar onSubmit={handleSearchSubmit} />\n      <ImageGallery images={images} clickOnImage={openModal} />\n      {images.length > 0 && <Button clickOnButton={handleAddImagesButton} />}\n      {isLoad && <LoaderOfImages />}\n      {modalWindow && (\n        <Modal modalImage={modalImage} alt={alt} closeModal={modalSwith} />\n      )}\n      <ToastContainer autoClose={3000} />\n      </>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\nimport './index.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}